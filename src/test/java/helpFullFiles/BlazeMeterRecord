package com.example.tests;

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.testng.annotations.*;
import static org.testng.Assert.*;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

public class Sauced02 {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @BeforeClass(alwaysRun = true)
  public void setUp() throws Exception {
    driver = new ChromeDriver();
    baseUrl = "https://www.blazedemo.com/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testSauced02() throws Exception {
    // Label: Test
    // ERROR: Caught exception [ERROR: Unsupported command [resizeWindow | 1366,600 | ]]
    driver.get("https://www.saucedemo.com/");
    driver.findElement(By.id("login_credentials")).click();
    // ERROR: Caught exception [ERROR: Unsupported command [contextMenuAt | id=login_credentials | 8,73]]
    driver.findElement(By.id("user-name")).click();
    driver.findElement(By.id("user-name")).clear();
    driver.findElement(By.id("user-name")).sendKeys("standard_user");
    driver.findElement(By.cssSelector("div.login_password")).click();
    // ERROR: Caught exception [ERROR: Unsupported command [contextMenuAt | css=div.login_password | 8,61]]
    driver.findElement(By.id("password")).click();
    driver.findElement(By.id("password")).clear();
    driver.findElement(By.id("password")).sendKeys("secret_sauce");
    driver.findElement(By.id("login-button")).click();
    driver.findElement(By.cssSelector("select.product_sort_container")).click();
    new Select(driver.findElement(By.cssSelector("select.product_sort_container"))).selectByVisibleText("Price (low to high)");
    driver.findElement(By.xpath("//div[@id='inventory_container']/div/div[6]/div[2]")).click();
    driver.findElement(By.id("add-to-cart-sauce-labs-fleece-jacket")).click();
    driver.findElement(By.cssSelector("span.shopping_cart_badge")).click();
    driver.findElement(By.id("checkout")).click();
    driver.findElement(By.id("first-name")).click();
    driver.findElement(By.id("first-name")).clear();
    driver.findElement(By.id("first-name")).sendKeys("tig");
    driver.findElement(By.id("last-name")).click();
    driver.findElement(By.id("last-name")).clear();
    driver.findElement(By.id("last-name")).sendKeys("ba");
    driver.findElement(By.id("postal-code")).click();
    driver.findElement(By.id("postal-code")).clear();
    driver.findElement(By.id("postal-code")).sendKeys("0000");
    driver.findElement(By.id("continue")).click();
    driver.findElement(By.cssSelector("div.summary_info")).click();
    // ERROR: Caught exception [ERROR: Unsupported command [contextMenuAt | css=div.summary_total_label | 39,22]]
    driver.findElement(By.cssSelector("div.summary_total_label")).click();
    driver.findElement(By.id("finish")).click();
    driver.findElement(By.cssSelector("h2.complete-header")).click();
    // ERROR: Caught exception [ERROR: Unsupported command [contextMenuAt | css=h2.complete-header | 23,9]]
    driver.findElement(By.id("checkout_complete_container")).click();
  }

  @AfterClass(alwaysRun = true)
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
/////////////////////////


   /*
     driver.findElement(By.id("opentab")).click();
                    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | win_ser_2 | ]]
                    driver.get("https://www.rahulshettyacademy.com/");
                    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | win_ser_2 | ]]
                    driver.close(); @BeforeClass(alwaysRun = true)







    driver.get("https://rahulshettyacademy.com/AutomationPractice/");
    driver.findElement(By.id("openwindow")).click();


    driver.close();

    driver.findElement(By.id("opentab")).click();

    driver.get("https://www.rahulshettyacademy.com/");
  }

  @AfterClass(alwaysRun = true)
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}

     */



     package com.example.tests;

     import java.util.regex.Pattern;
     import java.util.concurrent.TimeUnit;
     import org.testng.annotations.*;
     import static org.testng.Assert.*;
     import org.openqa.selenium.*;
     import org.openqa.selenium.chrome.ChromeDriver;
     import org.openqa.selenium.support.ui.Select;

     public class Rahulshtty4 {
       private WebDriver driver;
       private String baseUrl;
       private boolean acceptNextAlert = true;
       private StringBuffer verificationErrors = new StringBuffer();

       @BeforeClass(alwaysRun = true)
       public void setUp() throws Exception {
         driver = new ChromeDriver();
         baseUrl = "https://www.blazedemo.com/";
         driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
       }

       @Test
       public void testRahulshtty4() throws Exception {
         // Label: Test
         // ERROR: Caught exception [ERROR: Unsupported command [resizeWindow | 1366,657 | ]]
         driver.get("https://rahulshettyacademy.com/AutomationPractice/");
         driver.findElement(By.id("name")).click();
         driver.findElement(By.id("name")).clear();
         driver.findElement(By.id("name")).sendKeys("Tigran");
         driver.findElement(By.id("alertbtn")).click();
         driver.findElement(By.id("name")).click();
         driver.findElement(By.id("name")).clear();
         driver.findElement(By.id("name")).sendKeys("Tigran");
         driver.findElement(By.cssSelector("body")).click();
         driver.findElement(By.id("confirmbtn")).click();
         driver.findElement(By.id("name")).click();
         driver.findElement(By.id("name")).clear();
         driver.findElement(By.id("name")).sendKeys("Tigran");
         driver.findElement(By.id("confirmbtn")).click();
       }

       @AfterClass(alwaysRun = true)
       public void tearDown() throws Exception {
         driver.quit();
         String verificationErrorString = verificationErrors.toString();
         if (!"".equals(verificationErrorString)) {
           fail(verificationErrorString);
         }
       }

       private boolean isElementPresent(By by) {
         try {
           driver.findElement(by);
           return true;
         } catch (NoSuchElementException e) {
           return false;
         }
       }

       private boolean isAlertPresent() {
         try {
           driver.switchTo().alert();
           return true;
         } catch (NoAlertPresentException e) {
           return false;
         }
       }

       private String closeAlertAndGetItsText() {
         try {
           Alert alert = driver.switchTo().alert();
           String alertText = alert.getText();
           if (acceptNextAlert) {
             alert.accept();
           } else {
             alert.dismiss();
           }
           return alertText;
         } finally {
           acceptNextAlert = true;
         }
       }
     }
/*

